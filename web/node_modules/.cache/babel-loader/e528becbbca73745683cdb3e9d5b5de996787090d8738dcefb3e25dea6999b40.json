{"ast":null,"code":"import $api from \"../services/index\";\nexport const getAllTests = async () => {\n  const {\n    data\n  } = await $api.get(\"/test/getAll\");\n  return data;\n};\nexport const getQuestionsByTestId = async TestId => {\n  const {\n    data\n  } = await $api.post(\"/question/findQuestions\", {\n    TestId\n  });\n  return data;\n};\nexport const getAnswerByQuestionId = async QuestionId => {\n  const {\n    data\n  } = await $api.post(\"/answer/get\", {\n    QuestionId\n  });\n  return data;\n};\nexport const createUserTest = async (UserId, TestId, Time, QuestionCount, CorrectAnswerCount) => {\n  const {\n    data\n  } = await $api.post(\"/userTest/create\", {\n    UserId,\n    TestId,\n    Time,\n    QuestionCount,\n    CorrectAnswerCount\n  });\n  return data;\n};\nexport const getUserTest = async () => {\n  const {\n    data\n  } = await $api.get(\"/userTest/get\");\n  return data;\n};\nexport const getUserTestByTestId = async TestId => {\n  const {\n    data\n  } = await $api.post(\"/userTest/getById\", {\n    TestId\n  });\n  return data;\n};\nexport const getTestName = async id => {\n  const {\n    data\n  } = await $api.get(\"/test/get\", {\n    params: {\n      id\n    }\n  });\n  return data;\n};\nexport const createTest = async (testTitle, questions, UserId) => {\n  const test = await $api.post(\"/test/create\", {\n    UserId,\n    Title: testTitle\n  }); // робимо тест\n  const TestId = test.data.id;\n  const Title = test.data.Title;\n  for (const element of questions) {\n    let Title = element.question;\n    const question = await $api.post(\"/question/create\", {\n      TestId,\n      Title\n    }); // робимо питання\n    const QuestionId = question.data.id;\n    const answer = await $api.post(\"/answer/create\", {\n      QuestionId,\n      Title: element.answers[element.correctAnswerIndex],\n      IsCorrect: true\n    }); // робимо коректні відповіді\n\n    let answers = element.answers;\n    const newAnswers = element.answers.filter((answers, index) => index !== element.correctAnswerIndex);\n    for (const answers of newAnswers) {\n      $api.post(\"/answer/create\", {\n        QuestionId,\n        Title: answers,\n        IsCorrect: false\n      }); // робимо не коректні відповіді\n    }\n  }\n};\nexport const findByCountTest = async () => {\n  const {\n    data\n  } = await $api.get(\"/userTest/findByCountTest\");\n  return data;\n};\nexport const findByRaiting = async () => {\n  const {\n    data\n  } = await $api.get(\"/userTest/findByRaiting\");\n  return data;\n};","map":{"version":3,"names":["$api","getAllTests","data","get","getQuestionsByTestId","TestId","post","getAnswerByQuestionId","QuestionId","createUserTest","UserId","Time","QuestionCount","CorrectAnswerCount","getUserTest","getUserTestByTestId","getTestName","id","params","createTest","testTitle","questions","test","Title","element","question","answer","answers","correctAnswerIndex","IsCorrect","newAnswers","filter","index","findByCountTest","findByRaiting"],"sources":["C:/Users/golov/coding/frelance/test-app-kursach/freelance-test-app-4/web/src/services/TestApi.js"],"sourcesContent":["import $api from \"../services/index\";\r\n\r\nexport const getAllTests = async () => {\r\n  const { data } = await $api.get(\"/test/getAll\");\r\n  return data;\r\n};\r\n\r\nexport const getQuestionsByTestId = async (TestId) => {\r\n  const { data } = await $api.post(\"/question/findQuestions\", { TestId });\r\n  return data;\r\n};\r\n\r\nexport const getAnswerByQuestionId = async (QuestionId) => {\r\n  const { data } = await $api.post(\"/answer/get\", { QuestionId });\r\n  return data;\r\n};\r\n\r\nexport const createUserTest = async (\r\n  UserId,\r\n  TestId,\r\n  Time,\r\n  QuestionCount,\r\n  CorrectAnswerCount\r\n) => {\r\n  const { data } = await $api.post(\"/userTest/create\", {\r\n    UserId,\r\n    TestId,\r\n    Time,\r\n    QuestionCount,\r\n    CorrectAnswerCount,\r\n  });\r\n  return data;\r\n};\r\n\r\nexport const getUserTest = async () => {\r\n  const { data } = await $api.get(\"/userTest/get\");\r\n  return data;\r\n};\r\n\r\nexport const getUserTestByTestId = async (TestId) => {\r\n  const { data } = await $api.post(\"/userTest/getById\", { TestId });\r\n  return data;\r\n};\r\n\r\nexport const getTestName = async (id) => {\r\n  const { data } = await $api.get(\"/test/get\", { params: { id } });\r\n  return data;\r\n};\r\n\r\nexport const createTest = async (testTitle, questions, UserId) => {\r\n  const test = await $api.post(\"/test/create\", { UserId, Title: testTitle }); // робимо тест\r\n  const TestId = test.data.id;\r\n  const Title = test.data.Title;\r\n\r\n  for (const element of questions) {\r\n    let Title = element.question;\r\n    const question = await $api.post(\"/question/create\", { TestId, Title }); // робимо питання\r\n    const QuestionId = question.data.id;\r\n\r\n    const answer = await $api.post(\"/answer/create\", {\r\n      QuestionId,\r\n      Title: element.answers[element.correctAnswerIndex],\r\n      IsCorrect: true,\r\n    }); // робимо коректні відповіді\r\n\r\n    let answers = element.answers;\r\n    const newAnswers = element.answers.filter(\r\n      (answers, index) => index !== element.correctAnswerIndex\r\n    );\r\n    for (const answers of newAnswers) {\r\n      $api.post(\"/answer/create\", {\r\n        QuestionId,\r\n        Title: answers,\r\n        IsCorrect: false,\r\n      }); // робимо не коректні відповіді\r\n    }\r\n  }\r\n};\r\n\r\nexport const findByCountTest = async () => {\r\n  const {data} = await $api.get(\"/userTest/findByCountTest\");\r\n  return data;\r\n};\r\n\r\n\r\nexport const findByRaiting = async () => {\r\n  const { data } = await $api.get(\"/userTest/findByRaiting\");\r\n  return data;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}