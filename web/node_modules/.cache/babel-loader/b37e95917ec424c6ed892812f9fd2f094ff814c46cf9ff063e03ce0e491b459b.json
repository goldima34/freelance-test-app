{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\golov\\\\coding\\\\frelance\\\\test-app-kursach\\\\freelance-test-app-2\\\\web\\\\src\\\\components\\\\TestForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getAnswerByQuestionId } from \"../services/TestApi\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TestForm = ({\n  question\n}) => {\n  _s();\n  const [answers, setAnswers] = useState();\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  useEffect(() => {\n    getAnswerByQuestionId(question.id).then(data => setAnswers(data));\n  }, [question.id]);\n  if (!answers) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"loading\"\n    }, void 0, false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [question.Title, answers.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\" // Use radio buttons for single selection\n        ,\n        id: answer.id,\n        name: \"answer\" // Give all radio buttons the same name\n        ,\n        checked: selectedAnswer === answer.id,\n        onChange: () => setSelectedAnswer(answer.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: answer.id,\n        children: answer.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, answer.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(TestForm, \"oK7VQP+hNyRc5i9IE58f/nJ5d0w=\");\n_c = TestForm;\nvar _c;\n$RefreshReg$(_c, \"TestForm\");","map":{"version":3,"names":["React","useEffect","useState","getAnswerByQuestionId","Fragment","_Fragment","jsxDEV","_jsxDEV","TestForm","question","_s","answers","setAnswers","selectedAnswer","setSelectedAnswer","id","then","data","children","Title","map","answer","type","name","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","title","_c","$RefreshReg$"],"sources":["C:/Users/golov/coding/frelance/test-app-kursach/freelance-test-app-2/web/src/components/TestForm.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getAnswerByQuestionId } from \"../services/TestApi\";\r\n\r\nexport const TestForm = ({ question }) => {\r\n  const [answers, setAnswers] = useState();\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n\r\n  useEffect(\r\n    () => {\r\n      getAnswerByQuestionId(question.id).then(data => setAnswers(data));\r\n    },\r\n    [question.id]\r\n  );\r\n\r\n  if(!answers){\r\n    return(\r\n        <>loading</>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {question.Title}\r\n      {answers.map(answer => (\r\n      <div key={answer.id}>\r\n          <input\r\n            type=\"radio\" // Use radio buttons for single selection\r\n            id={answer.id}\r\n            name=\"answer\" // Give all radio buttons the same name\r\n            checked={selectedAnswer === answer.id}\r\n            onChange={() => setSelectedAnswer(answer.id)}\r\n          />\r\n          <label htmlFor={answer.id}>{answer.title}</label>\r\n        </div>\r\n      ))}\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,qBAAqB,QAAQ,qBAAqB;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAE5D,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,CAAC;EACxC,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE1DD,SAAS,CACP,MAAM;IACJE,qBAAqB,CAACM,QAAQ,CAACM,EAAE,CAAC,CAACC,IAAI,CAACC,IAAI,IAAIL,UAAU,CAACK,IAAI,CAAC,CAAC;EACnE,CAAC,EACD,CAACR,QAAQ,CAACM,EAAE,CACd,CAAC;EAED,IAAG,CAACJ,OAAO,EAAC;IACV,oBACIJ,OAAA,CAAAF,SAAA;MAAAa,QAAA,EAAE;IAAO,gBAAE,CAAC;EAElB;EAEA,oBACEX,OAAA;IAAAW,QAAA,GACGT,QAAQ,CAACU,KAAK,EACdR,OAAO,CAACS,GAAG,CAACC,MAAM,iBACnBd,OAAA;MAAAW,QAAA,gBACIX,OAAA;QACEe,IAAI,EAAC,OAAO,CAAC;QAAA;QACbP,EAAE,EAAEM,MAAM,CAACN,EAAG;QACdQ,IAAI,EAAC,QAAQ,CAAC;QAAA;QACdC,OAAO,EAAEX,cAAc,KAAKQ,MAAM,CAACN,EAAG;QACtCU,QAAQ,EAAEA,CAAA,KAAMX,iBAAiB,CAACO,MAAM,CAACN,EAAE;MAAE;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,eACFtB,OAAA;QAAOuB,OAAO,EAAET,MAAM,CAACN,EAAG;QAAAG,QAAA,EAAEG,MAAM,CAACU;MAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,GAR3CR,MAAM,CAACN,EAAE;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASZ,CACN,CAAC,eACFtB,OAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnB,EAAA,CAnCWF,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}